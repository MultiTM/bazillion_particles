#pragma kernel CSMain
#include <UnityShaderVariables.cginc>

RWStructuredBuffer<float4x4> positionBuffer;
RWStructuredBuffer<float3> velocityBuffer;

float GetVectorSqrMagnitude(float3 vec)
{
    return vec.x * vec.x + vec.y * vec.y + vec.z * vec.z;
}

[numthreads(100, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    const float maxDistance = 10.0;
    const float maxDistanceSqr = maxDistance * maxDistance;
    float4x4 particleMatrix = positionBuffer[id.x];
    const float3 position = float3(particleMatrix[0][3], particleMatrix[1][3], particleMatrix[2][3]);
    const float3 velocity = velocityBuffer[id.x];
    const float3 newPosition = position + velocity * unity_DeltaTime.x;
    const float distanceSqr = GetVectorSqrMagnitude(newPosition);
    if (distanceSqr > maxDistanceSqr)
    {
        velocityBuffer[id.x] = sqrt(GetVectorSqrMagnitude(velocityBuffer[id.x])) * normalize(newPosition * -1.0);
    }
    particleMatrix[0][3] = newPosition.x;
    particleMatrix[1][3] = newPosition.y;
    particleMatrix[2][3] = newPosition.z;

    positionBuffer[id.x] = particleMatrix;
}
